import { Component, Input, OnInit } from '@angular/core';
import { ApiService } from '../../../../../../services/api.service';
import { MessageService } from 'primeng/api';

@Component({
  selector: 'app-gtg-exploitation',
  standalone: false,
  templateUrl: './gtg-exploitation.component.html',
  styleUrl: './gtg-exploitation.component.css'
})
export class GtgExploitationComponent implements OnInit {
  gasTurbineGeneratorExploitationData: any[] = [];
  gufSeaData: any[] = [];
  reductionGearData: any[] = [];
  replacementAssembliesData: any[] = [];
  annualRoutinesData: any[] = [];
  isEdit: boolean = true;
  @Input() srarEquipmentData: any[] = [];
  
  // Properties to track selected values for equipment
  selectedEquipment: any[] = [];
  selectedEquipmentReductionGear: any[] = [];
  selectedEquipmentReplacement: any[] = [];
  selectedEquipmentRoutines: any[] = [];
  headerData:any;
  constructor(private apiService: ApiService, private messageService: MessageService) {}
  
  ngOnInit() {
    this.headerData=this.apiService.getData();
    this.loadGasTurbineGeneratorExploitationData();
    this.loadGufSeaData();
    this.loadReductionGearData();
    this.loadReplacementAssembliesData();
    this.loadAnnualRoutinesData();
  }

  loadGasTurbineGeneratorExploitationData() {
    this.apiService.get('srar/gas-turbine-generator-exploitations/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.gasTurbineGeneratorExploitationData = data.results;
    });
  }

  loadGufSeaData() {
    this.apiService.get('srar/guf-sea-details/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.gufSeaData = data.results;
    });
  }

  loadReductionGearData() {
    this.apiService.get('srar/reduction-gear-details/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.reductionGearData = data.results;
    });
  }

  loadReplacementAssembliesData() {
    this.apiService.get('srar/replacement-assemblies/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.replacementAssembliesData = data.results;
    });
  }

  loadAnnualRoutinesData() {
    this.apiService.get('srar/annual-routines/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.annualRoutinesData = data.results;
    });
  }

  addGasTurbineGeneratorExploitation() {
    this.isEdit = false;
    
    // Check if any equipment is selected
    if (this.selectedEquipment.length > 0) {
      // Create a row for each selected equipment
      this.selectedEquipment.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.gasTurbineGeneratorExploitationData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
         
          equipment_name: selectedEquipmentData.equipment_name,
          nomenclature: selectedEquipmentData.nomenclature,
          equipment_code: selectedEquipmentData.equipment_code,
          location_name: selectedEquipmentData.location_name
        });
      });
      
      //console.log('addGasTurbineGeneratorExploitation', { selectedEquipment: this.selectedEquipment });
      
      // Clear the selection after adding
      this.selectedEquipment = [];
    }
  }

  addGufSea() {
    this.isEdit = false;
    
    // Add new empty row for GUF Sea data
    this.gufSeaData.push({
      srar_monthly_header:this.headerData.id,
      sfd_details: '',
      guf_of_sea: '',
      reason_for_exceeding_guf_sea: '',
      guf_harbour: '',
      reason_for_exceeding_guf_harbour: ''
    });
    
    //console.log('addGufSea - Added new row');
  }

  addReductionGear() {
    this.isEdit = false;
    
    // Check if any equipment is selected
    if (this.selectedEquipmentReductionGear.length > 0) {
      // Create a row for each selected equipment
      this.selectedEquipmentReductionGear.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.reductionGearData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
          serial_no: '', // Leave empty for manual filling
          rh_in_harbour: '',
          rh_in_sea: '',
          total_rh_in_month: '',
          total_rh_si: '',
          no_of_hot_starts_in_month: '',
          no_of_hot_starts_si: '',
          no_of_cold_starts_in_month: '',
          no_of_cold_starts_si: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name,
          nomenclature: selectedEquipmentData.nomenclature,
          equipment_code: selectedEquipmentData.equipment_code,
          location_name: selectedEquipmentData.location_name
        });
      });
      
      //console.log('addReductionGear', { selectedEquipmentReductionGear: this.selectedEquipmentReductionGear });
      
      // Clear the selection after adding
      this.selectedEquipmentReductionGear = [];
    }
  }

  addReplacementAssemblies() {
    this.isEdit = false;
    
    // Check if any equipment is selected
    if (this.selectedEquipmentReplacement.length > 0) {
      // Create a row for each selected equipment
      this.selectedEquipmentReplacement.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.replacementAssembliesData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
          equipment_si_number: '',
          date: '',
          unit_sub_unit: '',
          reason_for_replacement: '',
          remarks: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name
        });
      });
      
      //console.log('addReplacementAssemblies', { selectedEquipmentReplacement: this.selectedEquipmentReplacement });
      
      // Clear the selection after adding
      this.selectedEquipmentReplacement = [];
    }
  }

  addAnnualRoutines() {
    this.isEdit = false;
    
    // Check if any equipment is selected
    if (this.selectedEquipmentRoutines.length > 0) {
      // Create a row for each selected equipment
      this.selectedEquipmentRoutines.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.annualRoutinesData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
          equipment_si_number: '',
          date: '',
          description_for_routine: '',
          undertaken_by_whom: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name
        });
      });
      
      //console.log('addAnnualRoutines', { selectedEquipmentRoutines: this.selectedEquipmentRoutines });
      
      // Clear the selection after adding
      this.selectedEquipmentRoutines = [];
    }
  }

  editGasTurbineGeneratorExploitation() {
    this.isEdit = false;
    //console.log('editGasTurbineGeneratorExploitation - Entered edit mode');
  }

  editGufSea() {
    this.isEdit = false;
    //console.log('editGufSea - Entered edit mode');
  }

  editReductionGear() {
    this.isEdit = false;
    //console.log('editReductionGear - Entered edit mode');
  }

  editReplacementAssemblies() {
    this.isEdit = false;
    //console.log('editReplacementAssemblies - Entered edit mode');
  }

  editAnnualRoutines() {
    this.isEdit = false;
    //console.log('editAnnualRoutines - Entered edit mode');
  }

  saveGasTurbineGeneratorExploitation() {
    this.isEdit = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.gasTurbineGeneratorExploitationData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No gas turbine generator exploitation data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      // const payload = {
      //   srar_monthly_header:this.headerData.id,
      //   sfd_details: item.sfd_details,
        
      // };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing gas turbine generator exploitation record:', item);
        this.apiService.put(`srar/gas-turbine-generator-exploitations/${item.id}/`, item).subscribe({
          next: (response) => {
            //console.log('Updated gas turbine generator exploitation data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Gas turbine generator exploitation data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating gas turbine generator exploitation data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update gas turbine generator exploitation data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new gas turbine generator exploitation record:', item);
        this.apiService.post('srar/gas-turbine-generator-exploitations/', item).subscribe({
          next: (response) => {
            //console.log('Saved gas turbine generator exploitation data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Gas turbine generator exploitation data saved successfully'
            });
            // Reload data after successful save
            this.loadGasTurbineGeneratorExploitationData();
          },
          error: (error) => {
            console.error('Error saving gas turbine generator exploitation data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save gas turbine generator exploitation data'
            });
          }
        });
      }
    });

    //console.log('saveGasTurbineGeneratorExploitation', { dataToSave });
  }

  saveGufSea() {
    this.isEdit = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.gufSeaData.filter(item => 
      item.guf_of_sea || 
      item.reason_for_exceeding_guf_sea || 
      item.guf_harbour || 
      item.reason_for_exceeding_guf_harbour
    );

    if (dataToSave.length === 0) {
      //console.log('No GUF sea data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing GUF sea record:', item);
        this.apiService.put(`srar/eefs/${item.id}/`, item).subscribe({
          next: (response) => {
            //console.log('Updated GUF sea data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'GUF sea data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating GUF sea data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update GUF sea data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new GUF sea record:', item);
        this.apiService.post('srar/eefs/', item).subscribe({
          next: (response) => {
            //console.log('Saved GUF sea data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'GUF sea data saved successfully'
            });
            // Reload data after successful save
            this.loadGufSeaData();
          },
          error: (error) => {
            console.error('Error saving GUF sea data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save GUF sea data'
            });
          }
        });
      }
    });

    //console.log('saveGufSea', { dataToSave });
  }

  saveReductionGear() {
    this.isEdit = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.reductionGearData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No reduction gear data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        sfd_details: item.sfd_details,
        serial_no: item.serial_no,
        rh_in_harbour: item.rh_in_harbour,
        rh_in_sea: item.rh_in_sea,
        total_rh_in_month: item.total_rh_in_month,
        total_rh_si: item.total_rh_si,
        no_of_hot_starts_in_month: item.no_of_hot_starts_in_month,
        no_of_hot_starts_si: item.no_of_hot_starts_si,
        no_of_cold_starts_in_month: item.no_of_cold_starts_in_month,
        no_of_cold_starts_si: item.no_of_cold_starts_si
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing reduction gear record:', payload);
        this.apiService.put(`srar/reduction-gear-details/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated reduction gear data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Reduction gear data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating reduction gear data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update reduction gear data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new reduction gear record:', payload);
        this.apiService.post('srar/reduction-gear-details/', payload).subscribe({
          next: (response) => {
            //console.log('Saved reduction gear data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Reduction gear data saved successfully'
            });
            // Reload data after successful save
            this.loadReductionGearData();
          },
          error: (error) => {
            console.error('Error saving reduction gear data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save reduction gear data'
            });
          }
        });
      }
    });

    //console.log('saveReductionGear', { dataToSave });
  }

  saveReplacementAssemblies() {
    this.isEdit = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.replacementAssembliesData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No replacement assemblies data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        sfd_details: item.sfd_details,
        equipment_si_number: item.equipment_si_number,
        date: item.date,
        unit_sub_unit: item.unit_sub_unit,
        reason_for_replacement: item.reason_for_replacement,
        remarks: item.remarks
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing replacement assemblies record:', payload);
        this.apiService.put(`srar/replacement-assemblies/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated replacement assemblies data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Replacement assemblies data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating replacement assemblies data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update replacement assemblies data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new replacement assemblies record:', payload);
        this.apiService.post('srar/replacement-assemblies/', payload).subscribe({
          next: (response) => {
            //console.log('Saved replacement assemblies data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Replacement assemblies data saved successfully'
            });
            // Reload data after successful save
            this.loadReplacementAssembliesData();
          },
          error: (error) => {
            console.error('Error saving replacement assemblies data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save replacement assemblies data'
            });
          }
        });
      }
    });

    //console.log('saveReplacementAssemblies', { dataToSave });
  }

  saveAnnualRoutines() {
    this.isEdit = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.annualRoutinesData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No annual routines data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        sfd_details: item.sfd_details,
        equipment_si_number: item.equipment_si_number,
        date: item.date,
        description_for_routine: item.description_for_routine,
        undertaken_by_whom: item.undertaken_by_whom
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing annual routines record:', payload);
        this.apiService.put(`srar/annual-routines/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated annual routines data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Annual routines data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating annual routines data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update annual routines data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new annual routines record:', payload);
        this.apiService.post('srar/annual-routines/', payload).subscribe({
          next: (response) => {
            //console.log('Saved annual routines data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Annual routines data saved successfully'
            });
            // Reload data after successful save
            this.loadAnnualRoutinesData();
          },
          error: (error) => {
            console.error('Error saving annual routines data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save annual routines data'
            });
          }
        });
      }
    });

    //console.log('saveAnnualRoutines', { dataToSave });
  }

  deleteGasTurbineGeneratorExploitation(index: number) {
    const item = this.gasTurbineGeneratorExploitationData[index];
    
    if (item.id) {
      // Delete from API if it has an ID
      this.apiService.delete(`srar/gas-turbine-generator-exploitations/${item.id}/`).subscribe({
        next: (response) => {
          //console.log('Deleted gas turbine generator exploitation data:', response);
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: response.message || 'Gas turbine generator exploitation data deleted successfully'
          });
          this.gasTurbineGeneratorExploitationData.splice(index, 1);
        },
        error: (error) => {
          console.error('Error deleting gas turbine generator exploitation data:', error);
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: error.message || 'Failed to delete gas turbine generator exploitation data'
          });
        }
      });
    } else {
      // Remove from local array if it's a new item
      this.gasTurbineGeneratorExploitationData.splice(index, 1);
    }
  }
}
