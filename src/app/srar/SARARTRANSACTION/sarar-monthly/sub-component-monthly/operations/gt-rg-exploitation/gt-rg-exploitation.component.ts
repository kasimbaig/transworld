import { Component, Input, OnInit } from '@angular/core';
import { ApiService } from '../../../../../../services/api.service';
import { MessageService } from 'primeng/api';

@Component({
  selector: 'app-gt-rg-exploitation',
  standalone: false,
  templateUrl: './gt-rg-exploitation.component.html',
  styleUrl: './gt-rg-exploitation.component.css'
})
export class GtRgExploitationComponent implements OnInit {
  gasTurbineExploitationData: any[] = [];
  reductionGearExploitationData: any[] = [];
  replacementOfMajorAssembliesData: any[] = [];
  annualSRMRRoutineUndertakenData: any[] = [];
  isEdit: boolean = true;
  isEditReductionGear: boolean = true;
  isEditReplacement: boolean = true;
  isEditAnnualSRMR: boolean = true;
  @Input() srarEquipmentData: any[] = [];
  
  // Properties to track selected values for equipment
  selectedEquipment: any[] = [];
  selectedReductionGearEquipment: any[] = [];
  selectedReplacementEquipment: any[] = [];
  selectedAnnualSRMREquipment: any[] = [];
  
  headerData:any;
  constructor(private apiService: ApiService, private messageService: MessageService) {}
  
  ngOnInit() {
    this.headerData=this.apiService.getData();
    this.loadGasTurbineExploitationData();
    this.loadReductionGearExploitationData();
    this.loadReplacementOfMajorAssembliesData();
    this.loadAnnualSRMRRoutineUndertakenData();
  }

  loadGasTurbineExploitationData() {
    this.apiService.get('srar/gas-turbine-exploitations/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.gasTurbineExploitationData = data.results;
    });
  }

  loadReductionGearExploitationData() {
    this.apiService.get('srar/reduction-gear-exploitations/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.reductionGearExploitationData = data.results;
    });
  }

  loadReplacementOfMajorAssembliesData() {
    this.apiService.get('srar/replacement-of-major-assemblies/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.replacementOfMajorAssembliesData = data.results;
    });
  }

  loadAnnualSRMRRoutineUndertakenData() {
    this.apiService.get('srar/annual-srmr-routine-undertakens/?srar_monthly_header='+this.headerData.id).subscribe((data) => {
      this.annualSRMRRoutineUndertakenData = data.results;
    });
  }

  addGasTurbineExploitation() {
    this.isEdit = false;
    
    // Check if any equipment is selected
    if (this.selectedEquipment.length > 0) {
      // Create a row for each selected equipment
      this.selectedEquipment.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.gasTurbineExploitationData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
          serial_no: '', // Leave empty for manual filling
          total_rh_in_month: '',
          total_rh_si: '',
          no_of_hot_starts_in_month: '',
          no_of_hot_starts_si: '',
          no_of_cold_starts_in_month: '',
          no_of_cold_starts_si: '',
          no_of_false_starts_in_month: '',
          no_of_false_starts_si: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name,
          nomenclature: selectedEquipmentData.nomenclature,
          equipment_code: selectedEquipmentData.equipment_code,
          location_name: selectedEquipmentData.location_name
        });
      });
      
      //console.log('addGasTurbineExploitation', { selectedEquipment: this.selectedEquipment });
      
      // Clear the selection after adding
      this.selectedEquipment = [];
    }
  }

  addReductionGearExploitation() {
    this.isEditReductionGear = false;
    
    // Check if any equipment is selected
    if (this.selectedReductionGearEquipment.length > 0) {
      // Create a row for each selected equipment
      this.selectedReductionGearEquipment.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.reductionGearExploitationData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
          serial_no: '', // Leave empty for manual filling
          total_rh_in_month: '',
          total_rh_si: '',
          total_rh_regime1_in_month: '',
          total_rh_regime1_si: '',
          total_rh_regime2_in_month: '',
          total_rh_regime2_si: '',
          total_rh_regime3_in_month: '',
          total_rh_regime3_si: '',
          trailing_rh_in_month: '',
          trailing_rh_si: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name,
          nomenclature: selectedEquipmentData.nomenclature,
          equipment_code: selectedEquipmentData.equipment_code,
          location_name: selectedEquipmentData.location_name
        });
      });
      
      //console.log('addReductionGearExploitation', { selectedReductionGearEquipment: this.selectedReductionGearEquipment });
      
      // Clear the selection after adding
      this.selectedReductionGearEquipment = [];
    }
  }

  addReplacementOfMajorAssemblies() {
    this.isEditReplacement = false;
    
    // Check if any equipment is selected
    if (this.selectedReplacementEquipment.length > 0) {
      // Create a row for each selected equipment
      this.selectedReplacementEquipment.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.replacementOfMajorAssembliesData.push({
          srar_monthly_header:this.headerData.id,
          sfd_details: selectedEquipmentData.id, // Send only the ID
          serial_no: '', // Leave empty for manual filling
          unit_sub_units: '',
          reason_for_replacement: '',
          replacement_remarks: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name,
          nomenclature: selectedEquipmentData.nomenclature,
          equipment_code: selectedEquipmentData.equipment_code,
          location_name: selectedEquipmentData.location_name
        });
      });
      
      //console.log('addReplacementOfMajorAssemblies', { selectedReplacementEquipment: this.selectedReplacementEquipment });
      
      // Clear the selection after adding
      this.selectedReplacementEquipment = [];
    }
  }

  addAnnualSRMRRoutineUndertaken() {
    this.isEditAnnualSRMR = false;
    
    // Check if any equipment is selected
    if (this.selectedAnnualSRMREquipment.length > 0) {
      // Create a row for each selected equipment
      this.selectedAnnualSRMREquipment.forEach(selectedEquipmentData => {
        // Add new row with selected equipment data
        this.annualSRMRRoutineUndertakenData.push({
          srar_monthly_header:this.headerData.id,
          equipment: selectedEquipmentData.id, // Send only the ID
          serial_no: '', // Leave empty for manual filling
          date: '',
          description_of_routine: '',
          by_whom: '',
          // Frontend display fields (not sent to API)
          equipment_name: selectedEquipmentData.equipment_name,
          nomenclature: selectedEquipmentData.nomenclature,
          equipment_code: selectedEquipmentData.equipment_code,
          location_name: selectedEquipmentData.location_name
        });
      });
      
      //console.log('addAnnualSRMRRoutineUndertaken', { selectedAnnualSRMREquipment: this.selectedAnnualSRMREquipment });
      
      // Clear the selection after adding
      this.selectedAnnualSRMREquipment = [];
    }
  }

  editGasTurbineExploitation() {
    this.isEdit = false;
    //console.log('editGasTurbineExploitation - Entered edit mode');
  }

  editReductionGearExploitation() {
    this.isEditReductionGear = false;
    //console.log('editReductionGearExploitation - Entered edit mode');
  }

  editReplacementOfMajorAssemblies() {
    this.isEditReplacement = false;
    //console.log('editReplacementOfMajorAssemblies - Entered edit mode');
  }

  editAnnualSRMRRoutineUndertaken() {
    this.isEditAnnualSRMR = false;
    //console.log('editAnnualSRMRRoutineUndertaken - Entered edit mode');
  }

  saveGasTurbineExploitation() {
    this.isEdit = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.gasTurbineExploitationData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No gas turbine exploitation data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        sfd_details: item.sfd_details,
        serial_no: item.serial_no,
        total_rh_in_month: item.total_rh_in_month,
        total_rh_si: item.total_rh_si,
        no_of_hot_starts_in_month: item.no_of_hot_starts_in_month,
        no_of_hot_starts_si: item.no_of_hot_starts_si,
        no_of_cold_starts_in_month: item.no_of_cold_starts_in_month,
        no_of_cold_starts_si: item.no_of_cold_starts_si,
        no_of_false_starts_in_month: item.no_of_false_starts_in_month,
        no_of_false_starts_si: item.no_of_false_starts_si
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing gas turbine exploitation record:', payload);
        this.apiService.put(`srar/gas-turbine-exploitations/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated gas turbine exploitation data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Gas turbine exploitation data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating gas turbine exploitation data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update gas turbine exploitation data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new gas turbine exploitation record:', payload);
        this.apiService.post('srar/gas-turbine-exploitations/', payload).subscribe({
          next: (response) => {
            //console.log('Saved gas turbine exploitation data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Gas turbine exploitation data saved successfully'
            });
            // Reload data after successful save
            this.loadGasTurbineExploitationData();
          },
          error: (error) => {
            console.error('Error saving gas turbine exploitation data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save gas turbine exploitation data'
            });
          }
        });
      }
    });

    //console.log('saveGasTurbineExploitation', { dataToSave });
  }

  saveReductionGearExploitation() {
    this.isEditReductionGear = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.reductionGearExploitationData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No reduction gear exploitation data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        sfd_details: item.sfd_details,
        serial_no: item.serial_no,
        total_rh_in_month: item.total_rh_in_month,
        total_rh_si: item.total_rh_si,
        total_rh_regime1_in_month: item.total_rh_regime1_in_month,
        total_rh_regime1_si: item.total_rh_regime1_si,
        total_rh_regime2_in_month: item.total_rh_regime2_in_month,
        total_rh_regime2_si: item.total_rh_regime2_si,
        total_rh_regime3_in_month: item.total_rh_regime3_in_month,
        total_rh_regime3_si: item.total_rh_regime3_si,
        trailing_rh_in_month: item.trailing_rh_in_month,
        trailing_rh_si: item.trailing_rh_si
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing reduction gear exploitation record:', payload);
        this.apiService.put(`srar/reduction-gear-exploitations/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated reduction gear exploitation data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Reduction gear exploitation data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating reduction gear exploitation data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update reduction gear exploitation data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new reduction gear exploitation record:', payload);
        this.apiService.post('srar/reduction-gear-exploitations/', payload).subscribe({
          next: (response) => {
            //console.log('Saved reduction gear exploitation data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Reduction gear exploitation data saved successfully'
            });
            // Reload data after successful save
            this.loadReductionGearExploitationData();
          },
          error: (error) => {
            console.error('Error saving reduction gear exploitation data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save reduction gear exploitation data'
            });
          }
        });
      }
    });

    //console.log('saveReductionGearExploitation', { dataToSave });
  }

  saveReplacementOfMajorAssemblies() {
    this.isEditReplacement = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.replacementOfMajorAssembliesData.filter(item => 
      item.sfd_details // Only require sfd_details to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No replacement of major assemblies data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        sfd_details: item.sfd_details,
        serial_no: item.serial_no,
        unit_sub_units: item.unit_sub_units,
        reason_for_replacement: item.reason_for_replacement,
        replacement_remarks: item.replacement_remarks
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing replacement of major assemblies record:', payload);
        this.apiService.put(`srar/replacement-of-major-assemblies/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated replacement of major assemblies data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Replacement of major assemblies data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating replacement of major assemblies data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update replacement of major assemblies data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new replacement of major assemblies record:', payload);
        this.apiService.post('srar/replacement-of-major-assemblies/', payload).subscribe({
          next: (response) => {
            //console.log('Saved replacement of major assemblies data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Replacement of major assemblies data saved successfully'
            });
            // Reload data after successful save
            this.loadReplacementOfMajorAssembliesData();
          },
          error: (error) => {
            console.error('Error saving replacement of major assemblies data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save replacement of major assemblies data'
            });
          }
        });
      }
    });

    //console.log('saveReplacementOfMajorAssemblies', { dataToSave });
  }

  saveAnnualSRMRRoutineUndertaken() {
    this.isEditAnnualSRMR = true;
    
    // Filter out rows that have been filled with data
    const dataToSave = this.annualSRMRRoutineUndertakenData.filter(item => 
      item.equipment // Only require equipment to be present
    );

    if (dataToSave.length === 0) {
      //console.log('No annual SR/MR routine undertaken data to save');
      return;
    }

    // Process each item individually - new records get POST, existing records get PUT
    dataToSave.forEach(item => {
      // Create payload with only the fields that should be sent to API
      const payload = {
        srar_monthly_header:this.headerData.id,
        equipment: item.equipment,
        serial_no: item.serial_no,
        date: item.date,
        description_of_routine: item.description_of_routine,
        by_whom: item.by_whom
      };

      if (item.id) {
        // Update existing record with PUT
        //console.log('PUT API call for existing annual SR/MR routine undertaken record:', payload);
        this.apiService.put(`srar/annual-srmr-routine-undertakens/${item.id}/`, payload).subscribe({
          next: (response) => {
            //console.log('Updated annual SR/MR routine undertaken data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Annual SR/MR routine undertaken data updated successfully'
            });
          },
          error: (error) => {
            console.error('Error updating annual SR/MR routine undertaken data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to update annual SR/MR routine undertaken data'
            });
          }
        });
      } else {
        // Create new record with POST
        //console.log('POST API call for new annual SR/MR routine undertaken record:', payload);
        this.apiService.post('srar/annual-srmr-routine-undertakens/', payload).subscribe({
          next: (response) => {
            //console.log('Saved annual SR/MR routine undertaken data:', response);
            this.messageService.add({
              severity: 'success',
              summary: 'Success',
              detail: response.message || 'Annual SR/MR routine undertaken data saved successfully'
            });
            // Reload data after successful save
            this.loadAnnualSRMRRoutineUndertakenData();
          },
          error: (error) => {
            console.error('Error saving annual SR/MR routine undertaken data:', error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.message || 'Failed to save annual SR/MR routine undertaken data'
            });
          }
        });
      }
    });

    //console.log('saveAnnualSRMRRoutineUndertaken', { dataToSave });
  }

  deleteGasTurbineExploitation(index: number) {
    const item = this.gasTurbineExploitationData[index];
    
    if (item.id) {
      // Delete from API if it has an ID
      this.apiService.delete(`srar/gas-turbine-exploitations/${item.id}/`).subscribe({
        next: (response) => {
          //console.log('Deleted gas turbine exploitation data:', response);
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: response.message || 'Gas turbine exploitation data deleted successfully'
          });
          this.gasTurbineExploitationData.splice(index, 1);
        },
        error: (error) => {
          console.error('Error deleting gas turbine exploitation data:', error);
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: error.message || 'Failed to delete gas turbine exploitation data'
          });
        }
      });
    } else {
      // Remove from local array if it's a new item
      this.gasTurbineExploitationData.splice(index, 1);
    }
  }

  deleteReductionGearExploitation(index: number) {
    const item = this.reductionGearExploitationData[index];
    
    if (item.id) {
      // Delete from API if it has an ID
      this.apiService.delete(`srar/reduction-gear-exploitations/${item.id}/`).subscribe({
        next: (response) => {
          //console.log('Deleted reduction gear exploitation data:', response);
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: response.message || 'Reduction gear exploitation data deleted successfully'
          });
          this.reductionGearExploitationData.splice(index, 1);
        },
        error: (error) => {
          console.error('Error deleting reduction gear exploitation data:', error);
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: error.message || 'Failed to delete reduction gear exploitation data'
          });
        }
      });
    } else {
      // Remove from local array if it's a new item
      this.reductionGearExploitationData.splice(index, 1);
    }
  }

  deleteReplacementOfMajorAssemblies(index: number) {
    const item = this.replacementOfMajorAssembliesData[index];
    
    if (item.id) {
      // Delete from API if it has an ID
      this.apiService.delete(`srar/replacement-of-major-assemblies/${item.id}/`).subscribe({
        next: (response) => {
          //console.log('Deleted replacement of major assemblies data:', response);
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: response.message || 'Replacement of major assemblies data deleted successfully'
          });
          this.replacementOfMajorAssembliesData.splice(index, 1);
        },
        error: (error) => {
          console.error('Error deleting replacement of major assemblies data:', error);
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: error.message || 'Failed to delete replacement of major assemblies data'
          });
        }
      });
    } else {
      // Remove from local array if it's a new item
      this.replacementOfMajorAssembliesData.splice(index, 1);
    }
  }

  deleteAnnualSRMRRoutineUndertaken(index: number) {
    const item = this.annualSRMRRoutineUndertakenData[index];
    
    if (item.id) {
      // Delete from API if it has an ID
      this.apiService.delete(`srar/annual-srmr-routine-undertakens/${item.id}/`).subscribe({
        next: (response) => {
          //console.log('Deleted annual SR/MR routine undertaken data:', response);
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: response.message || 'Annual SR/MR routine undertaken data deleted successfully'
          });
          this.annualSRMRRoutineUndertakenData.splice(index, 1);
        },
        error: (error) => {
          console.error('Error deleting annual SR/MR routine undertaken data:', error);
          this.messageService.add({
            severity: 'error',
            summary: 'Error',
            detail: error.message || 'Failed to delete annual SR/MR routine undertaken data'
          });
        }
      });
    } else {
      // Remove from local array if it's a new item
      this.annualSRMRRoutineUndertakenData.splice(index, 1);
    }
  }
}
